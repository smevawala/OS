%!PS-Adobe-3.0
%%Creator: groff version 1.19.1
%%CreationDate: Fri Nov  8 01:20:40 2013
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Courier
%%DocumentSuppliedResources: procset grops 1.19 1
%%Pages: 20
%%PageOrder: Ascend
%%DocumentMedia: Default 612 792 0 () ()
%%Orientation: Portrait
%%EndComments
%%BeginDefaults
%%PageMedia: Default
%%EndDefaults
%%BeginProlog
%%BeginResource: procset grops 1.19 1
%!PS-Adobe-3.0 Resource-ProcSet
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/Fr{
setrgbcolor fill
}bind def
/setcmykcolor where{
pop
/Fk{
setcmykcolor fill
}bind def
}if
/Fg{
setgray fill
}bind def
/FL/fill load def
/LW/setlinewidth load def
/Cr/setrgbcolor load def
/setcmykcolor where{
pop
/Ck/setcmykcolor load def
}if
/Cg/setgray load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
/setpagedevice{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%EndProlog
%%BeginSetup
%%BeginFeature: *PageSize Default
<< /PageSize [ 612 792 ] /ImagingBBox null >> setpagedevice
%%EndFeature
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Courier
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/Euro/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Courier@0 ENC0/Courier RE/Times-Italic@0 ENC0/Times-Italic RE
/Times-Bold@0 ENC0/Times-Bold RE/Times-Roman@0 ENC0/Times-Roman RE
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)69.336 60 Q
(Unit 7/pg 1)55.998 E(\2512013 Jef)126.405 E 2.25(fH)-.225 G(akner)-2.25
E/F1 13/Times-Bold@0 SF(Synchr)151.831 120 Q(onization among Concurr)
-.234 E(ent tasks)-.234 E/F2 13/Times-Roman@0 SF 2.493
(In this unit we will consider a v)33.336 156 R 2.492
(ery important set of problems in Operating Systems)-.195 F 1.229
(design: synchronization between multiple)33.336 171 R/F3 13
/Times-Italic@0 SF -.13(ov)4.479 G(erlapping).13 E F2 1.229
(threads of e)4.479 F -.195(xe)-.195 G 1.23(cution which share).195 F
2.067(data structures in memory)33.336 186 R 8.567(.W)-.845 G 5.317(ew)
-9.607 G 2.067(ill see that the issues presented e)-5.317 F 2.067
(xist in a v)-.195 F 2.067(ariety of)-.325 F(conte)33.336 201 Q .288
(xts, although the speci\214cs of ho)-.195 F 3.538(wt)-.325 G .288
(hose issues can be solv)-3.538 F .288(ed dif)-.195 F 3.538
(fers. Speci\214cally)-.325 F 3.538(,i)-.845 G(n)-3.538 E(the UNIX en)
33.336 216 Q(vironment, multiple threads of e)-.52 E -.195(xe)-.195 G
(cution e).195 E(xist:)-.195 E(--User le)33.336 246 Q -.195(ve)-.325 G
(l--).195 E 5.026<8357>33.336 261 S 1.775(ithin a single, con)-5.546 F
-.195(ve)-.52 G 1.775
(ntional \(single-threaded\) UNIX process, a signal which causes).195 F
(in)33.336 276 Q -.26(vo)-.52 G 2.617
(cation of a handler function can be considered to be a ne).26 F 5.867
(wt)-.325 G 2.617(hread of e)-5.867 F -.195(xe)-.195 G(cution.).195 E
.285(Although the main program')33.336 291 R 3.535(st)-.715 G .285
(hread can be thought of as suspended during the e)-3.535 F -.195(xe)
-.195 G(cution).195 E .898(of the handler)33.336 306 R 4.149(,t)-.52 G
.899(he e)-4.149 F -.195(xe)-.195 G .899
(cution timelines of the handler and the main program o).195 F -.195(ve)
-.195 G .899(rlap and).195 F 1.644(thus can introduce issues of synchro\
nization if both the main program and the handler)33.336 321 R
(need to access the same data structure.)33.336 336 Q 3.79<8357>33.336
351 S .54
(ithin a single UNIX process when using a multi-threaded programming en)
-4.31 F(vironment,)-.52 E 1.528
(e.g. the Posix Threads \(pthreads\) library)33.336 366 R 8.028(.W)-.845
G 4.777(eh)-9.068 G -2.925 -.26(av e)-4.777 H 1.527
(not yet formally considered threads)5.037 F
(programming in this course.)33.336 381 Q 4.16<8341>33.336 396 S .91
(mong UNIX processes which share a memory re)-4.16 F .91
(gion \(e.g. through the)-.195 F/F4 13/Courier@0 SF(mmap)4.16 E F2
(system)4.16 E 4.599(call\). Here)33.336 411 R 1.349(the threads of e)
4.599 F -.195(xe)-.195 G 1.348(cution are the indi).195 F 1.348
(vidual processes.)-.325 F 1.348(In both this case and)7.848 F .178
(the case abo)33.336 426 R -.195(ve)-.195 G 3.429(,t).195 G .179
(he threads will e)-3.429 F -.195(xe)-.195 G .179
(cute either virtually at the same time \(if there is only a).195 F(sin\
gle real CPU\), or truly in parallel \(if there are multiple CPUs or co\
res\))33.336 441 Q(--K)33.336 471 Q(ernel le)-.325 E -.195(ve)-.325 G
(l--).195 E 3.842<8357>33.336 486 S 3.842(ew)-4.882 G .592
(ill soon see that the Linux k)-3.842 F .591(ernel is lik)-.13 F 3.841
(eag)-.13 G .591(iant, multi-threaded program.)-3.841 F .591(If there)
7.091 F 1.156(is a single processor)33.336 501 R 4.406(,t)-.52 G 1.156
(he situation is analogous to a single-threaded UNIX process with)-4.406
F .461(handled signals, in that the only synchronization concerns are b\
etween what the k)33.336 516 R .461(ernel is)-.13 F 2.116(doing synchro\
nously on behalf of the process, and what an interrupt handler is doing)
33.336 531 R(asynchronously)33.336 546 Q(.)-.845 E 4.443<8357>33.336 561
S 1.193(hen the Linux k)-4.443 F 1.193
(ernel is run on a multi-processor system, it is analogous to a multi-)
-.13 F .949(threaded UNIX process.)33.336 576 R .949
(There are synchronization issues among these multiple threads)7.449 F
(of e)33.336 591 Q -.195(xe)-.195 G
(cution, each on an independent processor).195 E 3.25(,a)-.52 G 3.25(sw)
-3.25 G(ell as with interrupt handlers.)-3.25 E 3.65(In this unit, we w\
ill use the term "thread" and "task" interchangeably and discuss)33.336
627 R(synchronization problems broadly)33.336 642 Q 3.25(,a)-.845 G
(pplying them to all of the abo)-3.25 E .39 -.195(ve c)-.195 H(ate).195
E(gories.)-.195 E(There are three primary problems in synchronization:)
33.336 678 Q 3.25<834d>33.336 693 S(aintaining the inte)-3.25 E
(grity of data structures when multiple tasks need to update them)-.195
E 3.25<8350>33.336 708 S(re)-3.25 E -.195(ve)-.325 G
(nting an erroneous or inconsistent vie).195 E 3.25(wo)-.325 G 3.25(fd)
-3.25 G(ata as it is being updated)-3.25 E 3.25<8343>33.336 723 S
(oordinating e)-3.25 E -.195(ve)-.325 G(nts between tasks).195 E 0 Cg EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 2)73.998 E(\2512013 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25
E/F1 13/Times-Bold@0 SF(Shar)126.377 120 Q(ed Update Pr)-.234 E
(oblem: A Simple Race Condition)-.234 E/F2 13/Times-Roman@0 SF .341(Con\
sider an imaginary banking system in which each teller is handled by a \
separate task.)33.336 156 R .883(All tasks share a common in-memory dat\
a structure which represents the state of all the)33.336 171 R
(depositors' accounts.)33.336 186 Q(The routine)6.5 E/F3 13
/Times-Italic@0 SF(deposit)3.25 E F2(updates an account balance:)3.25 E
/F4 10/Courier@0 SF(struct account {)33.336 210 Q(int balance;)90.936
222 Q(char *name;)90.936 234 Q(/* etc */)90.936 246 Q(};)33.336 258 Q
(deposit\(ap,amount\))33.336 282 Q(struct account *ap;)33.336 294 Q
(int amount;)33.336 306 Q({)33.336 318 Q(ap->balance += amount;)81.336
330 Q(})33.336 342 Q F2 .352(In this e)33.336 363 R .353(xample, the ac\
count structure is in memory shared among multiple tasks.)-.195 F .353
(On the)6.853 F .539(other hand, the local v)33.336 378 R(ariable)-.325
E F3(amount)3.789 E F2 .539(is pri)3.789 F -.325(va)-.325 G .539
(te to a particular instance of).325 F F3(deposit)3.788 E F2 3.788(;i)C
3.788(ti)-3.788 G 3.788(si)-3.788 G(n)-3.788 E(pri)33.336 393 Q -.325
(va)-.325 G .864(te memory which is not accessed by an).325 F 4.115(yo)
-.195 G .865(ther task \(either as an automatic v)-4.115 F(ariable)-.325
E .997(maintained on the task')33.336 408 R 4.246(ss)-.715 G .996
(tack or)-4.246 F 4.246(,i)-.52 G 4.246(ft)-4.246 G .996
(he compiler so chooses, held in a re)-4.246 F .996(gister which is)
-.195 F(part of the task')33.336 423 Q 3.25(sc)-.715 G(onte)-3.25 E
(xt\).)-.195 E(No)33.336 444 Q 3.187 -.845(w, c)-.325 H 1.498
(onsider the assembly language instructions implementing the abo).845 F
1.888 -.195(ve f)-.195 H 1.498(unction \(as).195 F
(seen using GCC on 32-bit X86 architecture\):)33.336 459 Q F4(deposit:)
33.336 471 Q 12(pushl %ebp)81.336 483 R(#save ebp register)168 E 18
(movl %esp,)81.336 495 R 126(%ebp #ebp)6 F(becomes frame pointer)6 E 18
(movl 8\(%ebp\),)81.336 507 R 108(%eax #move)6 F(&ap.balance to eax)6 E
18(movl 12\(%ebp\),)81.336 519 R 102(%ecx #move)6 F(amount to ecx)6 E 42
(1m)33.336 531 S 18(ovl \(%eax\),)-42 F 114(%edx #FETCH)6 F
(current val to edx)6 E 42(2a)33.336 543 S 18(ddl %ecx,)-42 F 126
(%edx #ADD)6 F(amount)6 E 42(3m)33.336 555 S 18(ovl %edx,)-42 F 114
(\(%eax\) #STORE)6 F(result)6 E 18(popl %ebp)81.336 567 R(#restore ebp)
168 E 216(ret #return)81.336 579 R(from fn call)6 E F2 .993
(Note the three instructions with labels 1, 2 and 3, which e)33.336 615
R -.195(xe)-.195 G .993(cute the FETCH, ADD and).195 F(ST)33.336 630 Q
6.271(ORE operations respecti)-.234 F -.195(ve)-.325 G(ly).195 E 12.771
(.A)-.845 G(bstractly)-12.771 E 9.522(,a)-.845 G 6.662 -.195(ny c)-9.522
H 6.272(omputation operation in).195 F -.26(vo)-.52 G(lving).26 E
(memory operands must be performed in these three distinct steps.)33.336
645 Q 1.599(Consider an e)33.336 666 R 1.599(xample case where)-.195 F
F3(deposit)4.849 E F2 1.599(is e)4.849 F -.195(xe)-.195 G 1.599
(cuted simultaneously in tw).195 F 4.849(ot)-.13 G 1.599(asks, with)
-4.849 F F3(amount)33.336 681 Q F2 5.827(=100, and)B F3(balance)9.077 E
F2 5.827(=100 before e)B -.195(xe)-.195 G 5.827(cution be).195 F 9.077
(gins. The)-.195 F(follo)9.078 E 5.828(wing schedule)-.325 F
(illustrates proper e)33.336 696 Q -.195(xe)-.195 G(cution:).195 E 0 Cg
EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 3)73.998 E(\2512013 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25
E/F1 13/Times-Roman@0 SF 16.25(Balance T)33.336 120 R(ask A)-1.04 E
-1.04(Ta)100.425 G(sk B)1.04 E .52 LW 349.795 125.25 33.336 125.25 DL
349.795 127.25 33.336 127.25 DL 38.623(100 BEFORE)33.336 139 R(BEFORE)
87.451 E 38.623(100 1:fetch)33.336 154 R(balance \(=100\))3.25 E 38.623
(100 2:add)33.336 169 R(\(=200\))3.25 E 38.623(100 3:write)33.336 184 R
(balance \(200\))3.25 E 175.916(200 1:fetch)33.336 199 R
(balance \(=200\))3.25 E 175.916(200 2:add)33.336 214 R(\(=300\))3.25 E
175.916(200 3:write)33.336 229 R(balance \(300\))3.25 E 38.623
(300 AFTER)33.336 244 R(AFTER)96.122 E 222.252 108.25 222.252 247.25 DL
84.959 108.25 84.959 247.25 DL 3.123(There are only tw)33.336 271 R
6.372(op)-.13 G 3.122(ossible sequences of e)-6.372 F -.195(xe)-.195 G
3.122(cution which yield the correct answer).195 F 3.322
(\(300->balance\): A1A2A3B1B2B3 or B1B2B3A1A2A3.)33.336 286 R 3.323
(There are se)9.822 F -.195(ve)-.325 G 3.323(ral sequences).195 F
(which yield the wrong answer)33.336 301 Q 3.25(,e)-.52 G(.g.:)-3.25 E
16.25(Balance T)33.336 322 R(ask A)-1.04 E -1.04(Ta)100.425 G(sk B)1.04
E 349.795 327.25 33.336 327.25 DL 349.795 329.25 33.336 329.25 DL 38.623
(100 BEFORE)33.336 341 R(BEFORE)87.451 E 38.623(100 1:fetch)33.336 356 R
(balance \(=100\))3.25 E 38.623(100 2:add)33.336 371 R(\(=200\))3.25 E
175.916(100 1:fetch)33.336 386 R(balance \(=100\))3.25 E 175.916
(100 2:add)33.336 401 R(\(=200\))3.25 E 175.916(100 3:write)33.336 416 R
(\(200\))3.25 E 38.623(200 3:write)33.336 431 R(\(200\))3.25 E 38.623
(200 AFTER)33.336 446 R(AFTER)96.122 E 222.252 310.25 222.252 449.25 DL
84.959 310.25 84.959 449.25 DL 0 Cg EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 4)73.998 E(\2512013 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25
E/F1 13/Times-Roman@0 SF 1.321(In this e)33.336 120 R 1.321
(xample, between statement 1, which reads the pre)-.195 F 1.321(vious v)
-.325 F 1.321(alue, and statement 3,)-.325 F(which writes the ne)33.336
135 Q 3.25(wv)-.325 G(alue back, the other task could interlope.)-3.575
E 1.969(The crux of the problem is that during this windo)33.336 156 R
5.22(wo)-.325 G 5.22(fo)-5.22 G(pportunity)-5.22 E 5.22(,t)-.845 G 1.97
(here are multiple)-5.22 F(copies of the data \(the balance\).)33.336
171 Q(Which one is the "right" one??)6.5 E -.195(Pa)33.336 192 S 2.174
(rticularly trick).195 F 5.424(yi)-.195 G 5.424(st)-5.424 G 2.174
(hat the correct operation in this case depends on the essentially)
-5.424 F .079(random sequence of task scheduling.)33.336 207 R .08
(This is kno)6.58 F .08(wn as a)-.325 F/F2 13/Times-Bold@0 SF .08
(race condition)3.33 F F1 6.58(.T)C .08(he code could)-6.58 F -.13(wo)
33.336 222 S .429(rk \215a).13 F .428
(wlessly for years on a particular operating system or piece of hardw)
-.195 F .428(are, and then)-.13 F -.13(fa)33.336 237 S 1.558
(il suddenly when the system is updated, the hardw).13 F 1.558
(are is upgraded, or e)-.13 F -.195(ve)-.325 G 4.809(nw).195 G 1.559
(hen the)-4.809 F
(system load changes resulting in a shift in scheduling order)33.336 252
Q(.)-.715 E F2(Atomicity)239.899 282 Q F1 1.182(The fundamental problem\
 is that the update of the balance is not performed atomically)33.336
318 R(.)-.845 E 1.001(An operation is deemed to be)33.336 333 R F2
(atomic)4.252 E F1 1.002
(if and only if it can only either run to completion)4.252 F .587
(without being interrupted or)33.336 348 R 3.837(,i)-.52 G 3.837(fi)
-3.837 G 3.837(tf)-3.837 G .587(ails to run, has no ef)-3.967 F 3.836
(fect. Because)-.325 F .586(the update abo)3.836 F .976 -.195(ve i)-.195
H(s).195 E .384(not performed atomically)33.336 363 R 3.635(,s)-.845 G
.385(imultaneous or o)-3.635 F -.195(ve)-.195 G .385
(rlapping update requests can interfere with).195 F(each other)33.336
378 Q(.)-.715 E .529(If we could mak)33.336 399 R 3.779(et)-.13 G .529
(he ADD atomic, then there w)-3.779 F .529(ould ne)-.13 F -.195(ve)-.325
G 3.779(rb).195 G 3.779(eat)-3.779 G .529(ime where multiple and)-3.779
F(inconsistent copies of the data w)33.336 414 Q(ould be visible.)-.13 E
3.328(\(Although this e)33.336 435 R 3.328(xample is some)-.195 F 3.328
(what contri)-.325 F -.195(ve)-.325 G 6.578(db).195 G 3.328(ecause man)
-6.578 F 6.578(yp)-.195 G 3.328(rocessors pro)-6.578 F 3.328(vide an)
-.195 F 2.395(atomic add instruction, let us continue with it as it is \
structurally equi)33.336 450 R -.325(va)-.325 G 2.394(lent to more).325
F(complicated, real-w)33.336 465 Q(orld problems.\))-.13 E F2
(Critical Regions and Mutual Exclusion)159.351 495 Q F1 1.236(In the e)
33.336 531 R 1.237(xample abo)-.195 F -.195(ve)-.195 G 4.487(,w).195 G
4.487(ec)-4.487 G 1.237
(an identify the time between and including the e)-4.487 F -.195(xe)
-.195 G 1.237(cution of).195 F .973
(step 1 and the completion of step 3 as a)33.336 546 R F2 .972
(critical r)4.222 F(egion)-.234 E F1 7.472(.D)C .972(ata consistenc)
-7.472 F 4.222(yi)-.195 G 4.222(sv)-4.222 G(ulnerable)-4.222 E 1.366
(during a critical re)33.336 561 R 1.367(gion because a pri)-.195 F
-.325(va)-.325 G 1.367(te v).325 F 1.367(ersion of a shared object e)
-.195 F 1.367(xists or because a)-.195 F
(shared data structure is in an intermediate state.)33.336 576 Q .23
(Is it necessary to enforce)33.336 597 R F2 .229(Mutual Exclusion)3.479
F F1 .229(in order to guarantee that at most one task is)3.479 F
(in the critical re)33.336 612 Q(gion at an)-.195 E 3.25(yg)-.195 G
-2.795 -.325(iv e)-3.25 H 3.25(nt).325 G 3.25(ime. There)-3.25 F(are tw)
3.25 E 3.25(ow)-.13 G(ays to vie)-3.38 E 3.25(wm)-.325 G(utual e)-3.25 E
(xclusion:)-.195 E 4.1<8354>33.336 627 S .85(he code-oriented vie)-4.1 F
.85(w: mutual e)-.325 F .85(xclusion is applied to the critical re)-.195
F .85(gion between and)-.195 F(including steps 1 and 3 of the)33.336 642
Q/F3 13/Courier@0 SF(deposit)3.25 E F1(function.)3.25 E 3.692<8354>
33.336 657 S .442(he data-oriented vie)-3.692 F .442
(w: we say that access to a particular)-.325 F F3 .442(struct account)
3.692 F F1 .442(must be)3.692 F(mutually e)33.336 672 Q(xclusi)-.195 E
-.195(ve)-.325 G(.).195 E F2
(Implementing MUTEX by Disabling Interrupts or Signals)106.266 702 Q F1
.27(On a uniprocessor system, mutually e)33.336 738 R(xclusi)-.195 E .66
-.195(ve a)-.325 H .27(ccess to the critical re).195 F .27
(gion can be ef)-.195 F(fected)-.325 E 0 Cg EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 5)73.998 E(\2512013 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25
E/F1 13/Times-Roman@0 SF 2.429(by pre)33.336 120 R -.195(ve)-.325 G
2.429(nting an).195 F 5.679(yo)-.195 G 2.428
(ther task from taking control of the cpu during that time.)-5.679 F
(When)8.928 E 1.057(considering a single-threaded con)33.336 135 R -.195
(ve)-.52 G 1.058(ntional UNIX process, this can be done by blocking).195
F 1.562(all signals upon entry to the critical re)33.336 150 R 1.562
(gion, then restoring the pre)-.195 F 1.561(vious signal mask on)-.325 F
-.195(ex)33.336 165 S(it:).195 E/F2 10/Courier@0 SF
(deposit\(ap,amount\))33.336 207 Q(struct account *ap;)33.336 219 Q
(int amount;)33.336 231 Q({)33.336 243 Q(sigset_t oldmask,newmask;)
39.336 255 Q 92.4(sigset_fill\(&newmask\); /*)90.936 267 R
(Set of all possible signals */)6 E 36
(sigprocmask\(SIG_BLOCK,&newmask,&oldmask\); /*)90.936 279 R(Block */)6
E(ap->balance += amount;)81.336 291 Q 105.6
(sigprocmask\(SIG_SETMASK,&oldmask,NULL\); /*)90.936 303 R(Restore */)6
E(})33.336 315 Q F1(Lik)33.336 336 Q -.325(ew)-.13 G 1.997
(ise, if this e).325 F 1.998(xample were running within the k)-.195 F
1.998(ernel on a uni-processor machine,)-.13 F 1.81(analogous protectio\
n can be obtained by masking all interrupts on entry to the critical)
33.336 351 R(re)33.336 366 Q(gion, then restoring the mask on e)-.195 E
(xit.)-.195 E(Ho)33.336 387 Q(we)-.325 E -.195(ve)-.325 G 6.054 -.52
(r, o).195 H 8.264(nam).52 G 5.014
(ulti-processor system, disabling interrupts only af)-8.264 F 5.014
(fects the local)-.325 F(processor)33.336 402 Q 9.365(.I)-.715 G 6.115
(tw)-9.365 G 2.865(ould still be possible for)-6.245 F/F3 13/Courier@0
SF(deposit)6.114 E F1 2.864(to be running simultaneously on)6.114 F
1.029(another processor)33.336 417 R 7.529(.A)-.715 G 4.279(tt)-7.529 G
1.029(he user)-4.279 F(-le)-.26 E -.195(ve)-.325 G 1.029
(l, blocking signals w).195 F 1.029(ould not be ef)-.13 F(fecti)-.325 E
1.419 -.195(ve i)-.325 H 4.279(nam).195 G(ulti-)-4.279 E 1.021
(threaded en)33.336 432 R 1.02
(vironment, or where multiple independent processes share a memory re)
-.52 F(gion,)-.195 E
(because there are other threads of control besides signal handlers.)
33.336 447 Q/F4 13/Times-Bold@0 SF(Spin Lock Mutex)219.301 477 Q F1
6.177(As)33.336 513 S 2.927(pin lock is a simple form of mutual e)-6.177
F 2.928(xclusion which does not rely on blocking)-.195 F
(interrupts or signals.)33.336 528 Q(The tw)6.5 E 3.25(oe)-.13 G
(ssential elements of a spin lock are:)-3.25 E 5.589<8354>33.336 543 S
2.338(he lock itself, which is simply a v)-5.589 F 2.338
(ariable that has tw)-.325 F 5.588(op)-.13 G 2.338(ossible states: lock)
-5.588 F 2.338(ed and)-.13 F(unlock)33.336 558 Q(ed.)-.13 E 3.25<8354>
33.336 573 S(he lock contention mechanism: a tight retry loop.)-3.25 E
3.39(At)33.336 609 S .14(ask desiring to enter a critical re)-3.39 F .14
(gion or access a mute)-.195 F .141(x-protected data structure checks)
-.195 F .568(the lock v)33.336 624 R 3.818(ariable. If)-.325 F .568
(it is unlock)3.818 F .567(ed, it sets the v)-.13 F .567
(ariable to lock)-.325 F .567(ed and proceeds.)-.13 F .567
(If it \214nds)7.067 F .98(the v)33.336 639 R .98(ariable in the lock)
-.325 F .98(ed state, the task e)-.13 F -.195(xe)-.195 G .981
(cutes a tight loop, re-e).195 F .981(xamining the v)-.195 F(ariable)
-.325 E 1.432(until the v)33.336 654 R 1.432(ariable indicates unlock)
-.325 F 4.682(ed. On)-.13 F -.195(ex)4.682 G 1.432
(it from the critical re).195 F 1.432(gion, the task sets the)-.195 F
-.325(va)33.336 669 S(riable to the unlock).325 E(ed state.)-.13 E
(Spin locks only mak)33.336 690 Q 3.25(es)-.13 G(ense if:)-3.25 E 3.25
<8354>33.336 705 S(he critical re)-3.25 E
(gion is brief so the total number of retries is e)-.195 E
(xpected to be small.)-.195 E 3.625<8354>33.336 720 S .375
(he tasks can not get "stuck" in the critical re)-3.625 F .376
(gion thus resulting in an endless spin lock)-.195 F(loop.)33.336 735 Q
0 Cg EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 6)73.998 E(\2512013 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25
E/F1 13/Times-Roman@0 SF 4.662<8354>33.336 120 S 1.412
(he tasks in contention are able to e)-4.662 F -.195(xe)-.195 G 1.412
(cute in parallel.).195 F 1.411(It w)7.912 F 1.411(ould mak)-.13 F 4.661
(en)-.13 G 4.661(os)-4.661 G 1.411(ense for a)-4.661 F -.13(ke)33.336
135 S 1.684(rnel interrupt handler to use a spin lock on single-process\
or machine, because if the).13 F 3.472(interrupt were to arri)33.336 150
R 3.862 -.195(ve w)-.325 H 3.472(hile the k).195 F 3.472(ernel w)-.13 F
3.472(as already inside the critical re)-.13 F 3.472(gion, the)-.195 F
.622(interrupt handler w)33.336 165 R .622(ould loop fore)-.13 F -.195
(ve)-.325 G 3.872(rw).195 G .622(aiting for an e)-4.002 F -.195(ve)-.325
G .622(nt which can ne).195 F -.195(ve)-.325 G 3.872(rc).195 G .622
(ome because)-3.872 F .183(it requires that the handler return and e)
33.336 180 R -.195(xe)-.195 G .183(cution in the main thread resume.)
.195 F -1.04(We)6.683 G -.13('l)1.04 G 3.432(ls).13 G .182(ee that)
-3.432 F 1.758(where spin locks are used inside the Linux k)33.336 195 R
1.758(ernel, the)-.13 F 5.008(ya)-.195 G 1.758
(re protected by a conditional)-5.008 F(compilation.)33.336 210 Q
(As a \214rst-cut approach, we could do the follo)33.336 240 Q(wing:)
-.325 E/F2 10/Courier@0 SF(struct account {)33.336 252 Q(int spinlock;)
90.936 264 Q(/* 0 is unlocked, NZ is locked */)94.8 E(int balance;)
90.936 276 Q(char *name;)90.936 288 Q(/* etc */)90.936 300 Q(};)33.336
312 Q(deposit\(ap,amount\))33.336 336 Q(struct account *ap;)33.336 348 Q
(int amount;)33.336 360 Q({)33.336 372 Q(/* BEGIN CRITICAL REGION */)
90.936 384 Q(while \(ap->spinlock!=0\))90.936 396 Q(;)148.536 408 Q
(ap->spinlock=1;)90.936 420 Q(ap->balance += amount;)81.336 432 Q
(ap->spinlock=0;)90.936 444 Q(/* END CRITICAL REGION */)90.936 456 Q(})
33.336 468 Q F1(Unfortunately)33.336 489 Q 4.822(,w)-.845 G 4.822(eh)
-4.822 G -2.925 -.26(av e)-4.822 H -.13(fa)5.082 G 1.572
(llen into the same atomicity trap as we had before!).13 F(Namely)8.072
E(,)-.845 E .019(task A could \214nd ap->spinlock clear)33.336 504 R
3.269(,b)-.52 G .019
(ut before it has a chance to lock it by setting it to 1,)-3.529 F
(task B could come along and also \214nd 0 in that memory location.)
33.336 519 Q/F3 13/Times-Bold@0 SF(Atomic Instructions)211.91 549 Q F1
.159(What is required is an instruction which can)33.336 579 R F3 .159
(atomically test and set.)3.409 F F1 .158(Such an instruction)6.658 F
(has the follo)33.336 594 Q(wing schematic operation:)-.325 E F2
(TAS\(int *addr\):)33.336 606 Q(mask interrupts)90.936 618 Q
(lock memory bus)90.936 630 Q(if \(\(R= *addr\)==0\))90.936 642 Q({)
90.936 654 Q(*addr=1)148.536 666 Q(})90.936 678 Q(release memory bus)
90.936 690 Q(unmask interrupts)90.936 702 Q(return R)90.936 714 Q F1
2.422(On a)33.336 735 R 2.422(multi-processor system, access to the sha\
red memory pool is coordinated by a)8.922 F 0 Cg EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 7)73.998 E(\2512013 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25
E/F1 13/Times-Bold@0 SF 3.842(memory arbiter)33.336 120 R/F2 13
/Times-Roman@0 SF 10.342(.W)C 3.842(hen an atomic instruction such as T)
-10.342 F 3.841(AS is e)-1.209 F -.195(xe)-.195 G 3.841
(cuted, the local).195 F 4.33(processor locks the memory b)33.336 135 R
4.33(us, which instructs the arbiter to pre)-.26 F -.195(ve)-.325 G 4.33
(nt an).195 F 7.581(yo)-.195 G(ther)-7.581 E 2.883
(processor from accessing memory during this critical re)33.336 150 R
6.132(gion. The)-.195 F 2.882(use of write-back)6.132 F
(caching introduces additional hardw)33.336 165 Q(are-le)-.13 E -.195
(ve)-.325 G 3.25(lc).195 G(oncerns.)-3.25 E 2.085(Processors may ha)
33.336 186 R 2.476 -.195(ve o)-.26 H 2.086(ther atomic instructions.)
.195 F -.195(Fo)8.586 G 5.336(re).195 G 2.086
(xample, in the X86 architecture,)-5.531 F(man)33.336 201 Q 4.314(yo)
-.195 G 1.063(pcodes can be made atomic by pre\214xing them with the LO\
CK byte \(0xF0\).)-4.314 F -.195(Fo)7.563 G(r).195 E 4.627
(some of the synchronization methods sho)33.336 216 R 4.627
(wn in this unit, these additional atomic)-.325 F .997
(instructions may streamline implementation.)33.336 231 R(Ho)7.497 E(we)
-.325 E -.195(ve)-.325 G 2.037 -.52(r, w).195 H .996
(ith just one atomic instruction,).52 F(such as T)33.336 246 Q
(AS, all other mechanisms can be b)-1.209 E(uilt up from it.)-.26 E .905
(As an aside, on processors that completely lack an)33.336 267 R 4.156
(yk)-.195 G .906(ind of atomic instruction, it is still)-4.156 F 1.237
(possible to achie)33.336 282 R 1.626 -.195(ve m)-.325 H 1.236(utual e)
.195 F 1.236(xclusion through a method kno)-.195 F 1.236(wn as)-.325 F
/F3 13/Times-Italic@0 SF -1.04(Pe)4.486 G(ter)1.04 E(son')-.13 E 4.486
(sA)-.52 G(lgorithm)-4.486 E F2(.)A 3.028(This method quickly becomes v)
33.336 297 R 3.028(ery a)-.195 F(wkw)-.195 E 3.028
(ard when more than tw)-.13 F 6.278(ot)-.13 G 3.028(asks need to be)
-6.278 F 3.343(synchronized. This)33.336 312 R .092(method is no)3.342 F
3.342(wl)-.325 G(ar)-3.342 E .092
(gely of theoretical and historical interest only)-.234 F 3.342(,s)-.845
G(ince)-3.342 E .399(almost all modern processors ha)33.336 327 R .789
-.195(ve a)-.26 H .399
(tomic instructions \(and those that do not typically do).195 F
(not run softw)33.336 342 Q(are that has synchronization issues\).)-.13
E(Gi)33.336 363 Q -.195(ve)-.325 G 4.127(nt).195 G .877(hat we ha)-4.127
F 1.267 -.195(ve a)-.26 H 4.127(na).195 G .877
(tomic test-and-set operation, our e)-4.127 F .877
(xample code can be protected)-.195 F 3.25(with it:)33.336 378 R/F4 10
/Courier@0 SF(deposit\(ap,amount\))33.336 390 Q(struct account *ap;)
33.336 402 Q(int amount;)33.336 414 Q({)33.336 426 Q
(/* BEGIN CRITICAL REGION */)90.936 438 Q
(while \(TAS\(&ap->spinlock\)!=0\))90.936 450 Q(;)148.536 462 Q
(ap->balance += amount;)81.336 474 Q(ap->spinlock=0;)90.936 486 Q
(/* END CRITICAL REGION */)90.936 498 Q(})33.336 510 Q F1
(Code-based or Data-based?)190.785 540 Q F2 3.562 -1.04(We n)33.336 576
T 1.483(oted that mutual e)1.04 F 1.483
(xclusion protection could be applied to code, or to data.)-.195 F 1.483
(In the)7.983 F -.195(ex)33.336 591 S .73(ample abo).195 F -.195(ve)
-.195 G 3.979(,b).195 G .729(oth interpretations are possible.)-3.979 F
2.809 -1.04(We c)7.229 H .729(ould look at the mute)1.04 F 3.979(x\()
-.195 G(spinlock\))-3.979 E .066
(as protecting entry into the critical code re)33.336 606 R .066
(gion, or we could look at spinlock as protecting)-.195 F(an indi)33.336
621 Q(vidual account.)-.325 E 2.14(Unfortunately programmers are often \
not clear enough about their locking paradigms,)33.336 642 R .945
(and this can cause subtle yet f)33.336 657 R .945
(atal errors when other programmers attempt to write code)-.13 F 1.356
(within the same frame)33.336 672 R -.13(wo)-.325 G 1.356
(rk \(such as within the k).13 F 4.606(ernel\). A)-.13 F 1.355
(comment is al)4.606 F -.13(wa)-.13 G 1.355(ys in order).13 F
(when locking is used:)33.336 687 Q F4(struct account {)33.336 699 Q
(int spinlock;)90.936 711 Q
(/* protects balance member of this struct only */)94.8 E(int balance;)
90.936 723 Q(char *name;)90.936 735 Q 0 Cg EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 8)73.998 E(\2512013 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25
E/F1 10/Courier@0 SF(/* etc */)90.936 117 Q(};)33.336 129 Q/F2 13
/Times-Bold@0 SF(Mutex locking with blocking/yielding)164.22 159 Q/F3 13
/Times-Roman@0 SF .846
(In a multi-processor system, spin locks are reasonably ef)33.336 189 R
.846(\214cient because the task holding)-.325 F 1.356
(the lock will soon release it and only a fe)33.336 204 R 4.606(wc)-.325
G 1.356(ycles will be w)-4.801 F 4.606(asted. Ho)-.13 F(we)-.325 E -.195
(ve)-.325 G 2.395 -.52(r, o).195 H 4.605(nau).52 G(ni-)-4.605 E .793(pr\
ocessor system, if task A comes along and \214nds that the lock is curr\
ently held by task)33.336 219 R 2.064
(B, it means that task B is currently pre-empted, w)33.336 234 R 2.063
(aiting for its turn at the lone CPU.)-.13 F 1.544(Therefore, things w)
33.336 249 R 1.545(ould actually mo)-.13 F 1.935 -.195(ve a)-.195 H
1.545(long f).195 F 1.545(aster if task A)-.13 F F2(block)4.795 E(ed)
-.13 E F3 1.545(and relinquished)4.795 F
(the CPU to another runnable task \(perhaps task B\).)33.336 264 Q 5.719
-1.04(We c)33.336 285 T 3.639(an also consider)1.04 F 6.888(,o)-.52 G
6.888(nam)-6.888 G 3.638(ulti-processor system, task A holding a mute)
-6.888 F 6.888(xf)-.195 G 3.638(or a)-6.888 F(relati)33.336 300 Q -.195
(ve)-.325 G 1.197(ly long time \(say a comple).195 F 4.447(xd)-.195 G
1.197(ata structure change\).)-4.447 F -1.04(Ta)7.697 G 1.197
(sk B, running on another)1.04 F 1.928(process, \214nds the mute)33.336
315 R 5.178(xl)-.195 G(ock)-5.178 E 5.178(ed. W)-.13 F 1.928
(ith spin locks, task B w)-.52 F 1.927(astes CPU time that could)-.13 F
(otherwise be allocated to another task C which is ready to run.)33.336
330 Q .199(Let us de\214ne)33.336 351 R/F4 13/Courier@0 SF(YIELD)3.449 E
F3 .199(as a function which blocks e)3.449 F -.195(xe)-.195 G .2
(cution of the current task.).195 F .2(When this)6.7 F 1.111
(function returns, the current task has been scheduled ag)33.336 366 R
1.11(ain, b)-.065 F 1.11(ut this does not imply that)-.26 F
(the lock is no)33.336 381 Q 3.25(wf)-.325 G 3.25(ree. W)-3.25 F 3.25
(ec)-1.04 G(an de\214ne three mutual e)-3.25 E(xclusion locking primiti)
-.195 E -.195(ve)-.325 G(s:).195 E F1(mutex_lock\(int *lp\))33.336 393 Q
({)33.336 405 Q(while \(TAS\(lp\)\))90.936 417 Q 49.2
(YIELD\(lp\); //includes)148.536 429 R(arranging for wakeup)6 E
(return 1;)90.936 441 Q(})33.336 453 Q(mutex_trylock\(int *lp\))33.336
477 Q({)33.336 489 Q(return !TAS\(lp\);)90.936 501 Q(})33.336 513 Q
(mutex_unlock\(int *lp\))33.336 537 Q({)33.336 549 Q(*lp=0;)90.936 561 Q
43.2(WAKEUP\(lp\); //)90.936 573 R(wake up any tasks block on mutex *lp)
6 E(})33.336 585 Q F3 .852
(As we will see in later units, forms of these mute)33.336 606 R 4.102
(xl)-.195 G .852(ock primiti)-4.102 F -.195(ve)-.325 G 4.102(sa).195 G
.852(re found both in the)-4.102 F -.13(ke)33.336 621 S .616
(rnel code and in the).13 F/F5 13/Times-Italic@0 SF .615(POSIX Thr)3.865
F(eads)-.481 E F3 .615(library which pro)3.865 F .615
(vides support for multi-threaded)-.195 F(user)33.336 636 Q(-le)-.26 E
-.195(ve)-.325 G 8.86(lp).195 G 8.86(rogramming. In)-8.86 F 5.61
(both cases, the mute)8.86 F 8.86(xl)-.195 G 5.61
(ock is a considerably more)-8.86 F 2.75
(complicated data structure as it must store the identi\214ers of an)
33.336 651 R 6(yt)-.195 G 2.75(hreads which ha)-6 F -.195(ve)-.26 G
(block)33.336 666 Q 1.992(ed on trying to acquire the mute)-.13 F 5.242
(x. When)-.195 F 1.992(the thread holding the mute)5.242 F 5.242(xe)
-.195 G -.195(xe)-5.437 G(cutes).195 E F4(mutex_unlock)33.336 681 Q F3
5.324(,t)C 2.074(hese block)-5.324 F 2.074
(ed threads must be noti\214ed of this e)-.13 F -.195(ve)-.325 G 2.073
(nt and run ag).195 F(ain.)-.065 E .725(This is an e)33.336 696 R .725
(xample of the)-.195 F F2 .725(sleep and wak)3.975 F(eup)-.13 E F3 3.976
(problem. W)3.975 F 3.976(ew)-1.04 G .726(ill ha)-3.976 F 1.116 -.195
(ve t)-.26 H 3.976(od).195 G .726(efer discussion)-3.976 F .94
(of the mechanics of sleeping and w)33.336 711 R .94
(aking up until a subsequent unit when)-.13 F F2(scheduling)4.189 E F3
(is)4.189 E(co)33.336 726 Q -.195(ve)-.195 G(red.).195 E 0 Cg EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 9)73.998 E(\2512013 Jef)144.405 E 2.25(fH)-.225 G(akner)-2.25
E/F1 13/Times-Bold@0 SF(The deadlock pr)204.975 120 Q(oblem)-.234 E
(Deadlock)33.336 156 Q/F2 13/Times-Roman@0 SF 1.159
(occurs when task A is w)4.408 F 1.159(aiting for task B, and vice-v)
-.13 F 1.159(ersa, or)-.195 F 4.409(,m)-.52 G 1.159(ore generally)-4.409
F(,)-.845 E .896(there e)33.336 171 R .896(xists an)-.195 F 4.146(yc)
-.195 G .895(ycle in the w)-4.341 F .895
(ait-for graph depicting the state of all the tasks.)-.13 F(Consider)
7.395 E 1.515(the e)33.336 186 R 1.515
(xample of tasks A and B which "simultaneously" attempt operations O)
-.195 F 4.765(Aa)-.455 G 1.515(nd OB,)-4.765 F(respecti)33.336 201 Q
-.195(ve)-.325 G(ly).195 E 3.25(,b)-.845 G
(oth requiring locks on resources R1 and R2:)-3.25 E/F3 10/Courier@0 SF
(OA\(\))33.336 213 Q({)33.336 225 Q(mutex_lock\(&R1\);)81.336 237 Q
(mutex_lock\(&R2\);)81.336 249 Q(/*whatever*/)81.336 261 Q
(mutex_unlock\(&R2\);)81.336 273 Q(mutex_unlock\(&R1\);)81.336 285 Q(})
33.336 297 Q(OB\(\))33.336 321 Q({)33.336 333 Q(mutex_lock\(&R2\);)
81.336 345 Q(mutex_lock\(&R1\);)81.336 357 Q(/*whatever*/)81.336 369 Q
(mutex_unlock\(&R1\);)81.336 381 Q(mutex_unlock\(&R2\);)81.336 393 Q(})
33.336 405 Q F2(Consider this schedule \(recall that lock and unlock ar\
e atomic primiti)33.336 426 Q -.195(ve)-.325 G(s\)).195 E 69.199(AB)
33.336 447 S .52 LW 171.006 452.25 33.336 452.25 DL 171.006 454.25
33.336 454.25 DL(lock R1)33.336 466 Q(lock R2)111.921 481 Q -.13(wa)
111.921 496 S(it for R1).13 E -.13(wa)33.336 511 S(it for R2).13 E
102.171 435.25 102.171 514.25 DL F1(Deadlock A)211.176 547 Q -.13(vo)
-1.3 G(idance).13 E F2 .165(One approach to deadlocks is)33.336 583 R F1
.165(deadlock a)3.415 F -.13(vo)-.325 G(idance).13 E F2 6.665(.D)C .165
(eadlock can be a)-6.665 F -.26(vo)-.26 G .165(ided if locks are).26 F
F1 1.521(strictly order)33.336 598 R(ed)-.234 E F2 1.522
(and all tasks acquire locks in this same order)4.771 F 8.022(.I)-.715 G
4.772(fa)-8.022 G 1.912 -.195(ny l)-4.772 H 1.522(ock can not be).195 F
(obtained, the task must release ALL held locks and try ag)33.336 613 Q
(ain:)-.065 E F3(obtain_locks\(\))33.336 625 Q({)33.336 637 Q(retry:)
39.336 649 Q(for\(i=0;i<N;i++\))81.336 661 Q({)81.336 673 Q
(if \(mutex_trylock\(&mut[i]\)!=0\))129.336 685 Q({)129.336 697 Q
(for\(j=i;--j>=0;\))177.336 709 Q(mutex_unlock\(&mut[j]\);)225.336 721 Q
(goto retry;)177.336 733 Q 0 Cg EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 10)71.748 E(\2512013 Jef)142.155 E 2.25(fH)-.225 G(akner)
-2.25 E/F1 10/Courier@0 SF(})129.336 117 Q(})81.336 129 Q(})33.336 153 Q
/F2 13/Times-Bold@0 SF(Deadlock Detection)213.36 168 Q/F3 13
/Times-Roman@0 SF 1.058(Deadlock a)33.336 204 R -.26(vo)-.26 G 1.058
(idance isn').26 F 4.308(ta)-.234 G -.13(lwa)-4.308 G 1.057
(ys possible for the general case.).13 F 1.057
(If the code participating)7.557 F .794(in the potential deadlock isn')
33.336 219 R 4.045(tw)-.234 G .795
(ritten by the same person, or cooperating parties, then it)-4.045 F
2.134(is impossible to enforce ordering.)33.336 234 R 2.134
(Since the Linux k)8.634 F 2.134(ernel is controlled by one entity)-.13
F(,)-.845 E .928(deadlock a)33.336 249 R -.26(vo)-.26 G .928
(idance is practiced within it for k).26 F .929(ernel code.)-.13 F .929
(But for general-purpose user)7.429 F(-)-.26 E(le)33.336 264 Q -.195(ve)
-.325 G 3.25(la).195 G(pplications, deadlock detection is required:)
-3.25 E 5.045(When an underlying operating system k)33.336 285 R 5.045
(ernel is a)-.13 F -.325(va)-.26 G 5.045(ilable to pro).325 F 5.045
(vide the locking)-.195 F(primiti)33.336 300 Q -.195(ve)-.325 G 3.266
(s, it is possible to perform).195 F F2 3.267(deadlock detection)6.517 F
F3 9.767(.T)C 3.267(he operating system can)-9.767 F 1.14
(maintain a data structure representing the w)33.336 315 R 1.139
(ait-for dependencies between tasks, and can)-.13 F(tra)33.336 330 Q
-.195(ve)-.26 G 1.114(rse the graph whene).195 F -.195(ve)-.325 G 4.364
(ral).195 G 1.114(ock is requested to see if it w)-4.364 F 1.114
(ould result in deadlock.)-.13 F(If)7.614 E 3.484(so, all tasks in)
33.336 345 R -.26(vo)-.52 G(lv).26 E 3.484
(ed in the deadlock can be signaled.)-.195 F 3.484
(Deadlock detection is v)9.984 F(ery)-.195 E
(typically seen in database applications.)33.336 360 Q F2(Li)239.477 390
Q .26 -.13(ve L)-.13 H(ock).13 E F3 3.897(At)33.336 426 S .647
(erm often used as a corrollary to deadlock is "li)-3.897 F -.195(ve)
-.325 G 3.898(lock". When).195 F(tw)3.898 E 3.898(oo)-.13 G 3.898(rm)
-3.898 G .648(ore tasks are)-3.898 F .783(in con\215ict with each other\
 such that their states continue to change b)33.336 441 R .782(ut e)-.26
F -.195(ve)-.325 G .782(ntually return).195 F .317(to a pre)33.336 456 R
.317(vious state without an)-.325 F 3.567(yp)-.195 G .317
(ossibility of e)-3.567 F -.195(ve)-.325 G 3.567(rt).195 G .317
(erminating, that is considered li)-3.567 F -.195(ve)-.325 G(lock.).195
E(Li)33.336 471 Q -.195(ve)-.325 G .111(lock can be pre).195 F -.195(ve)
-.325 G .111(nted by attempting to grab resources in a set order).195 F
3.361(,a)-.52 G .111(nd making sure)-3.361 F 6.585
(that "ties" can not e)33.336 486 R 9.835(xist. In)-.195 F 6.586(the e)
9.836 F 6.586(xample abo)-.195 F -.195(ve)-.195 G 9.836(,l).195 G -2.795
-.325(iv e)-9.836 H 6.586(lock is a).325 F -.26(vo)-.26 G 6.586
(ided because).26 F/F4 13/Courier@0 SF(mutex_trylock)33.336 501 Q F3
.631(must succeed for e)3.881 F .63
(xactly one task, because it relies on an underlying)-.195 F 2.777(atom\
ic test-and-set instruction, which serializes access to shared memory)
33.336 516 R 9.278(.I)-.845 G 6.028(fi)-9.278 G 6.028(tw)-6.028 G(ere)
-6.028 E(possible for)33.336 531 Q F4(mutex_trylock)3.25 E F3(to f)3.25
E(ail for all tasks, li)-.13 E -.195(ve)-.325 G(lock could occur).195 E
(.)-.715 E F2(Fine vs Coarse Grain Locking)183.915 561 Q F3 .055
(If the only object of synchronization w)33.336 597 R .055(as to pre)
-.13 F -.195(ve)-.325 G .055(nt data corruption, we w).195 F .054
(ould al)-.13 F -.13(wa)-.13 G .054(ys use).13 F .989
(the biggest, most conserv)33.336 612 R(ati)-.325 E 1.379 -.195(ve p)
-.325 H .989(ossible lock.).195 F(Ho)7.489 E(we)-.325 E -.195(ve)-.325 G
2.029 -.52(r, a).195 H .99(nother concern is performance.).52 F .328
(In man)33.336 627 R 3.578(yr)-.195 G(eal-w)-3.578 E .328
(orld cases, a strict mute)-.13 F 3.578(xl)-.195 G .327
(ock is too restricti)-3.578 F -.195(ve)-.325 G 3.577(,i).195 G 3.577
(nt)-3.577 G .327(hat it pre)-3.577 F -.195(ve)-.325 G .327
(nts one task).195 F 1.574(from getting an)33.336 642 R 1.574
(ything done whatsoe)-.195 F -.195(ve)-.325 G 4.824(rw).195 G 1.574
(hile another task holds a mute)-4.824 F 4.824(xt)-.195 G 1.574
(hat it needs.)-4.824 F 2.693 -1.04(We w)33.336 657 T .613(ould lik).91
F 3.863(et)-.13 G 3.863(oh)-3.863 G -2.925 -.26(av e)-3.863 H .613
(additional synchronization mechanisms which can be applied at a)4.123 F
2.783(\214ner le)33.336 672 R -.195(ve)-.325 G 2.783
(l, and potentially allo).195 F 6.033(wm)-.325 G 2.783(ore producti)
-6.033 F 3.173 -.195(ve s)-.325 H(imultaneity).195 E 9.283(.O)-.845 G
2.783(ur \214rst e)-9.283 F 2.784(xample of)-.195 F(re\214ning mute)
33.336 687 Q 3.25(xl)-.195 G(ocking will be reader/writer locking.)-3.25
E F2(Read/write locking)214.796 717 Q 0 Cg EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 11)71.748 E(\2512013 Jef)142.155 E 2.25(fH)-.225 G(akner)
-2.25 E/F1 13/Times-Roman@0 SF 1.987
(When an object is protected by a mute)33.336 120 R 1.986
(x, this will pre)-.195 F -.195(ve)-.325 G 1.986(nt tw).195 F 5.236(ot)
-.13 G 1.986(asks from reading the)-5.236 F 1.17(object simultaneously)
33.336 135 R 7.67(.S)-.845 G 1.171(ince no harm is done by this, it w)
-7.67 F 1.171(ould be desirable to allo)-.13 F 4.421(wi)-.325 G(t.)
-4.421 E(Ho)33.336 150 Q(we)-.325 E -.195(ve)-.325 G 1.318 -.52(r, w)
.195 H .278(hen a task w).52 F .278
(ants to write to the object, that should lock out both other writers)
-.13 F(and readers, since the object may be in an inconsistent state du\
ring the write action.)33.336 165 Q -.52(Wi)33.336 186 S .098
(th read/write locking, an).52 F 3.348(yn)-.195 G .098
(umber of tasks may hold a)-3.348 F/F2 13/Times-Bold@0 SF(permissi)3.348
E -.13(ve)-.13 G(-).13 E F1(aka)3.348 E F2 -.234(re)3.348 G .098
(ad-only lock).234 F F1 -.26(bu)33.336 201 S 3.554(to).26 G .304
(nly one task may hold the)-3.554 F F2(exclusi)3.554 E .564 -.13(ve l)
-.13 H(ock).13 E F1 .304(which allo)3.554 F .304
(ws writing, and only if there are)-.325 F .827(no permissi)33.336 216 R
1.217 -.195(ve l)-.325 H .827(ocks currently held.).195 F .827
(One possible implementation b)7.327 F .828(uilding on spin locks)-.26 F
(and the YIELD/W)33.336 231 Q(AKEUP mechanism is:)-1.56 E/F3 10
/Courier@0 SF(struct rwlock {)33.336 243 Q(int spinlock;)90.936 255 Q
(// Protects next two fields)37.2 E(int readers;)90.936 267 Q
(int writers;)90.936 279 Q(})33.336 291 Q
(rw_rdlock\(struct rwlock *lock\))33.336 315 Q({)33.336 327 Q(for\(;;\))
90.936 339 Q({)90.936 351 Q(while \(TAS\(&lock->spinlock\)!=0\))148.536
363 Q(;)206.136 375 Q(if \(lock->writers>0\))148.536 387 Q({)148.536 399
Q(lock->spinlock=0;)206.136 411 Q(YIELD\(\);)206.136 423 Q(})148.536 435
Q(break;)148.536 447 Q 12(}/)90.936 459 S
(/spinlock is held on loop exit)-12 E(lock->readers++;)90.936 471 Q
(lock->spinlock=0;)90.936 483 Q(})33.336 495 Q
(rw_wrlock\(struct rwlock *lock\))33.336 519 Q({)33.336 531 Q(for\(;;\))
90.936 543 Q({)90.936 555 Q(while \(TAS\(&lock->spinlock\)!=0\))148.536
567 Q(;)206.136 579 Q(if \(lock->writers>0 || lock->readers>0\))148.536
591 Q({)148.536 603 Q(lock->spinlock=0;)206.136 615 Q(YIELD\(\);)206.136
627 Q(})148.536 639 Q(break;)148.536 651 Q 12(}/)90.936 663 S
(/spinlock is held on loop exit)-12 E(lock->writers++;)90.936 675 Q
(lock->spinlock=0;)90.936 687 Q(})33.336 699 Q
(rw_unlock\(struct rwlock *lock\))33.336 723 Q({)33.336 735 Q 0 Cg EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 12)71.748 E(\2512013 Jef)142.155 E 2.25(fH)-.225 G(akner)
-2.25 E/F1 10/Courier@0 SF(while \(TAS\(&lock->spinlock\)\))90.936 117 Q
(;)148.536 129 Q(if \(lock->readers>0\) lock->readers--;)90.936 141 Q
(lock->writers=0;)90.936 153 Q(WAKEUP ANY TASKS WAITING ON lock)90.936
165 Q(lock->spinlock=0;)90.936 177 Q(})33.336 189 Q/F2 13/Times-Roman@0
SF 2.713(The Linux k)33.336 210 R 2.713(ernel often has "cle)-.13 F
-.195(ve)-.325 G 2.712(r" implementations of synchronization mechanisms)
.195 F 1.109(based on other atomic instructions which are a)33.336 225 R
-.325(va)-.26 G 1.11(ilable, especially on the X86 processor).325 F -.13
(fa)33.336 240 S 2.377(mily which is its primary tar).13 F 5.627(get. W)
-.234 F 2.377(ithin the Linux 2.6 \(32-bit\) k)-.52 F 2.376
(ernel, reader/write)-.13 F 2.552(locks are implemented as a 32 bit v)
33.336 255 R 5.802(alue. The)-.325 F 2.552
(least signi\214cant 24 bits are used as a)5.802 F .209
(counter holding the tw)33.336 270 R(o')-.13 E .209
(s-complement of the number of read locks currently held.)-.715 F .209
(Bit 24)6.709 F .221
(is the boolean \215ag and is 1 when all locks are released.)33.336 285
R .221(Therefore, the v)6.721 F .221(alue 0x01000000)-.325 F .71
(represents that the read/write lock is unlock)33.336 300 R 3.96
(ed. When)-.13 F .71(the write lock is held, the v)3.96 F .709(alue is)
-.325 F 4.157(0x00000000. If,)33.336 315 R .907(e.g. tw)4.157 F 4.157
(ot)-.13 G .907(asks hold read locks, the v)-4.157 F .907(alue w)-.325 F
.907(ould be 0x00FFFFFE.)-.13 F(\(Bits)7.407 E
(31-25 are used for bitwise \215ags by the k)33.336 330 Q(ernel\))-.13 E
3.345 -1.04(To o)33.336 351 T 1.265(btain a read lock, the lock w)1.04 F
1.265(ord is atomically decremented.)-.13 F 1.265
(\(The X86 architecture)7.765 F 2.143(has an atomic ADD instruction.)
33.336 366 R 2.143
(Other architectures that lack this must emulate it by)8.643 F .495(usi\
ng a spin lock to protect a non-atomic add\) If this resulted in a zero\
 or ne)33.336 381 R -.065(ga)-.195 G(ti).065 E .884 -.195(ve v)-.325 H
(alue,)-.13 E 1.13(then the lock w)33.336 396 R 1.13(ord must ha)-.13 F
1.52 -.195(ve p)-.26 H(re).195 E 1.13
(viously been 0 \(write lock already held\), therefore the)-.325 F .437
(task atomically increments the lock w)33.336 411 R .437
(ord to undo the pre)-.13 F .437(vious operation, then w)-.325 F .437
(aits until)-.13 F(the lock w)33.336 426 Q
(ord becomes non-zero, then attempts to obtain the lock ag)-.13 E(ain.)
-.065 E 4.578 -1.04(To o)33.336 447 T 2.498(btain a write lock, the v)
1.04 F 2.498(alue 0x01000000 is atomically subtracted from the lock)
-.325 F -.13(wo)33.336 462 S 6.759(rd. If).13 F 3.509
(the result is 0, then it is kno)6.759 F 3.508(wn that the pre)-.325 F
3.508(vious v)-.325 F 3.508(alue must ha)-.325 F 3.898 -.195(ve b)-.26 H
(een).195 E 1.668(0x01000000, i.e. no readers and writers.)33.336 477 R
1.668(Furthermore, the current v)8.168 F 1.668(alue is no)-.325 F 4.918
(w0)-.325 G 4.918(,a)-4.918 G(nd)-4.918 E 2.557
(thus the write lock has been obtained.)33.336 492 R 2.556
(If the result is non-zero, the task undoes the)9.057 F
(operation by atomically adding 0x01000000 and then tries ag)33.336 507
Q(ain.)-.065 E 0 Cg EP
%%Page: 13 13
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 13)71.748 E(\2512013 Jef)142.155 E 2.25(fH)-.225 G(akner)
-2.25 E/F1 13/Times-Bold@0 SF(Example of r)180.983 120 Q
(eader/writer locks)-.234 E/F2 13/Times-Roman@0 SF 1.52(In our pre)
33.336 156 R 1.52(vious bank account system, we can re\214ne the lockin\
g so that write locks are)-.325 F(used to mak)33.336 171 Q 3.25(ead)-.13
G(eposit, b)-3.25 E(ut read locks are used to look up a balance.)-.26 E
/F3 10/Courier@0 SF(deposit\(account,amount\))33.336 183 Q
(struct account *account;)33.336 195 Q({)33.336 207 Q
(rw_wrlock\(&account->rwlock\);)81.336 219 Q(account->balance+=amount;)
90.936 231 Q(rw_unlock\(&account->rwlock\);)90.936 243 Q(return 1;)
81.336 255 Q(})33.336 267 Q(int viewbalance\(struct account *account\))
33.336 291 Q({)33.336 303 Q(int bal;)39.336 315 Q
(rw_rdlock\(&account->rwlock\);)90.936 327 Q(bal=account->balance;)
90.936 339 Q(rw_unlock\(&account->rwlock\);)90.936 351 Q(return bal;)
90.936 363 Q(})33.336 375 Q F1(The pr)173.203 390 Q
(oblem of inconsistent views)-.234 E F2 .398(The follo)33.336 426 R .398
(wing e)-.325 F .398(xample illustrates the use of read/write locks, b)
-.195 F .398(ut also introduces a subtle)-.26 F(problem:)33.336 441 Q F3
42(transfer\(from,to,amount\) /*)33.336 453 R(Task A /)6 E
(struct account *from,*to;)33.336 465 Q({)33.336 477 Q
(if \(from==to\) return -1;)81.336 489 Q(/*Nonsense operation*/)48 E
(for\(;;\) /* Deadlock avoidance */)90.936 501 Q({)90.936 513 Q
(rw_wrlock\(&from->rwlock\);)148.536 525 Q
(if \(rw_wrlock\(&to->rwlock\)\) break;)148.536 537 Q
(rw_unlock\(&from->rwlock\);)148.536 549 Q(})90.936 561 Q
(if \(from->balance < amount\))81.336 573 Q({)81.336 585 Q
(rw_unlock\(&to->rwlock\);)129.336 597 Q(rw_unlock\(&from->rwlock\);)
129.336 609 Q(return -1;)129.336 621 Q(})81.336 633 Q
(from->balance-=amount;)81.336 645 Q(to->balance+=amount;)81.336 657 Q
(rw_unlock\(&to->rwlock\);)81.336 669 Q(rw_unlock\(&from->rwlock\);)
81.336 681 Q(return 1;)81.336 693 Q(})33.336 705 Q 78(totalize\(\) /*)
33.336 729 R(Task B */)6 E({)33.336 741 Q 0 Cg EP
%%Page: 14 14
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 14)71.748 E(\2512013 Jef)142.155 E 2.25(fH)-.225 G(akner)
-2.25 E/F1 10/Courier@0 SF(int i,tot;)39.336 117 Q(tot=0;)81.336 129 Q
(for\(i=0;i<n_acct;i++\))81.336 141 Q({)81.336 153 Q
(rw_rdlock\(&accounts[i].rwlock\);)129.336 165 Q
(tot+=accounts[i].balance;)129.336 177 Q
(rw_unlock\(&accounts[i].rwlock\);)129.336 189 Q(})81.336 201 Q
(return tot;)81.336 213 Q(})33.336 225 Q/F2 13/Times-Roman@0 SF -1.04
(Ta)33.336 246 S .16(sk B runs periodically to pro)1.04 F .161
(vide a report of the sum total of all accounts in the system.)-.195 F
-1.04(Ta)33.336 261 S 2.529(sk A runs from time-to-time to transfer an \
amount from one account to the other)1.04 F(.)-.715 E .767
(Clearly task B is read-only with respect to the)33.336 276 R/F3 13
/Courier@0 SF(balance)4.017 E F2 .767
(\214eld, while task A modi\214es it.)4.017 F .823(Although the e)33.336
291 R .823(xample abo)-.195 F 1.212 -.195(ve p)-.195 H .822(rotects ag)
.195 F .822(ainst an)-.065 F 4.072(yo)-.195 G .822(ne account ha)-4.072
F .822(ving the wrong balance)-.26 F 1.684(as a result of tw)33.336 306
R 4.934(oi)-.13 G 1.684(nstances of task A o)-4.934 F -.195(ve)-.195 G
1.685(rlapping, it does not correctly protect task B).195 F(ag)33.336
321 Q(ainst the problem of)-.065 E/F4 13/Times-Bold@0 SF
(inconsistent views)3.25 E F2(.)A 2.685(Suppose task B has just visited\
 account 100 and incremented the grand total by the)33.336 342 R 1.449
(balance in account 100.)33.336 357 R -1.04(Ta)7.949 G 1.449
(sk B releases the reader lock on account 100.)1.04 F 1.449(Then task A)
7.949 F 1.35
(comes along to transfer an amount from account 100 to account 105.)
33.336 372 R -1.04(Ta)7.849 G 1.349(sk A will \214nd)1.04 F .084
(both accounts unlock)33.336 387 R .084
(ed because task B is not currently looking at them.)-.13 F .084
(The result is that)6.584 F
(the amount to be transferred will be added in twice.)33.336 402 Q .4
(The reason for the f)33.336 423 R .4
(ailure is that when task B runs, it in f)-.13 F .399
(act requires a reader lock on the)-.13 F 3.889
(entire data structure, not just the indi)33.336 438 R 3.89
(vidual elements of it.)-.325 F(Ho)10.39 E(we)-.325 E -.195(ve)-.325 G
4.93 -.52(r, t).195 H 3.89(ask B is a).52 F 3.504
(potentially long-running task.)33.336 453 R 3.504
(If it holds a reader lock on the entire system, other)10.004 F
(transactions can not tak)33.336 468 Q 3.25(ep)-.13 G(lace.)-3.25 E .03
(On database systems this problem of inconsistent vie)33.336 489 R .031
(ws is addressed with a Multi-V)-.325 F(ersion)-1.443 E(Concurrenc)
33.336 504 Q 5.69(yC)-.195 G 2.44
(ontrol \(MVCC\) approach, in which each reader is gi)-5.69 F -.195(ve)
-.325 G 5.689(nap).195 G(ri)-5.689 E -.325(va)-.325 G 2.439(te and).325
F .72(consistent vie)33.336 519 R 3.97(wo)-.325 G 3.97(ft)-3.97 G .72
(he data until all write acti)-3.97 F .721(vity has completed.)-.325 F
.721(While this approach is)7.221 F -.195(ve)33.336 534 S 3.454(ry inte\
resting, it is completely unsuitable for the synchronization problems f\
ound).195 F 3.072(within a k)33.336 549 R 3.072(ernel, because it relie\
s on a single serializer process \(the DBMS daemon)-.13 F
(process\) to arbitrate access and create this consistent vie)33.336 564
Q -.845(w.)-.325 G F4(Seqlocks)243.136 594 Q F2 5.922(Ap)33.336 630 S
2.672(ossible solution is)-5.922 F F4 2.672(optimistic synchr)5.922 F
(onization)-.234 E F2 5.921(,w)C 2.671(hich mak)-5.921 F 2.671
(es the assumption that)-.13 F .853(most of the time there will be no c\
on\215ict, and therefore the cost of \214xing things when a)33.336 645 R
.119(con\215ict does occur is more than outweighed by the sa)33.336 660
R .119(vings in a)-.26 F -.26(vo)-.26 G .119(iding e).26 F(xcessi)-.195
E .509 -.195(ve l)-.325 H(ocking.).195 E 3.573 -1.04(We w)33.336 681 T
1.493(ill use a type of optimistic synchronization which is used in cer\
tain places in the)1.04 F 1.111(Linux certain, where it is gi)33.336 696
R -.195(ve)-.325 G 4.36(nt).195 G 1.11(he name)-4.36 F F4(seqlock)4.36 E
F2 7.61(.A)C 1.11(seqlock consists of a plain mute)-3.25 F(x)-.195 E
1.125(lock and an inte)33.336 711 R 1.125
(ger sequence number \214eld, which is initialized to 0.)-.195 F 4.375
(Aw)7.625 G 1.125(riter obtains a)-4.375 F 4.091
(seqlock by \214rst obtaining the mute)33.336 726 R 7.34(xw)-.195 G 4.09
(ithin, and then atomically incrementing the)-7.34 F .678
(sequence counter by one.)33.336 741 R 2.758 -1.04(To r)7.178 H .678
(elease the seqlock, the counter is incremented once ag)1.04 F(ain,)
-.065 E 0 Cg EP
%%Page: 15 15
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 15)71.748 E(\2512013 Jef)142.155 E 2.25(fH)-.225 G(akner)
-2.25 E/F1 13/Times-Roman@0 SF(and then the mute)33.336 120 Q 3.25(xi)
-.195 G 3.25(sr)-3.25 G(eleased.)-3.25 E 1.903(Therefore, if the sequen\
ce counter is odd, then the lock is held by a writer)33.336 141 R 8.402
(.A)-.715 G(reader)-3.25 E .391(trying to obtain a read lock \214rst e)
33.336 156 R .392(xamines the sequence counter \(without an)-.195 F
3.642(ys)-.195 G .392(pin lock or)-3.642 F 1.426(other protection\), sa)
33.336 171 R 1.425(ving a cop)-.26 F 4.675(yt)-.13 G 4.675(oal)-4.675 G
1.425(ocal re)-4.675 F(gister)-.195 E 7.925(.I)-.715 G 4.675(ft)-7.925 G
1.425(he v)-4.675 F 1.425(alue read w)-.325 F 1.425(as odd, then the)
-.13 F .586(reader w)33.336 186 R 3.836(aits. If)-.13 F .586(the v)3.836
F .586(alue is e)-.325 F -.195(ve)-.325 G .587
(n, the reader is able to enter its critical re).195 F .587
(gion and access)-.195 F .397(the data.)33.336 201 R .397
(At the conclusion of the reader')6.897 F 3.646(sw)-.715 G .396
(ork, it e)-3.776 F .396(xamines the sequence counter ag)-.195 F(ain.)
-.065 E .188(If the number has changed, then a writer has interloped, a\
nd the reader must try the entire)33.336 216 R(process all o)33.336 231
Q -.195(ve)-.195 G 3.25(ra).195 G -.065(ga)-3.25 G(in.).065 E .402
(In the pre)33.336 252 R .402(vious e)-.325 F .401(xample, the reader i\
s task B which is calculating the total balance, while)-.195 F
(task A is a writer)33.336 267 Q 6.5(.L)-.715 G
(et us re-write this using seqlocks.)-6.5 E/F2 10/Courier@0 SF
(seqlock_t seqlock;)33.336 279 Q(// Global lock for whole system)64.8 E
42(transfer\(from,to,amount\) /*)33.336 303 R(Task A /)6 E
(struct account *from,*to;)33.336 315 Q({)33.336 327 Q
(if \(from==to\) return -1;)81.336 339 Q(/*Nonsense operation*/)48 E
(write_seqlock\(&seqlock\);)90.936 351 Q
(for\(;;\) /* Deadlock avoidance */)90.936 363 Q({)90.936 375 Q
(rw_wrlock\(&from->rwlock\);)148.536 387 Q
(if \(rw_wrlock\(&to->rwlock\)\) break;)148.536 399 Q
(rw_unlock\(&from->rwlock\);)148.536 411 Q(})90.936 423 Q
(if \(from->balance < amount\))81.336 435 Q({)81.336 447 Q
(rw_unlock\(&to->rwlock\);)129.336 459 Q(rw_unlock\(&from->rwlock\);)
129.336 471 Q(return -1;)129.336 483 Q(})81.336 495 Q
(from->balance-=amount;)81.336 507 Q(to->balance+=amount;)81.336 519 Q
(rw_unlock\(&to->rwlock\);)81.336 531 Q(rw_unlock\(&from->rwlock\);)
81.336 543 Q(write_sequnlock\(&seqlock\);)90.936 555 Q(return 1;)81.336
567 Q(})33.336 579 Q 78(totalize\(\) /*)33.336 603 R(Task B */)6 E({)
33.336 615 Q(int i,tot;)39.336 627 Q(int seq;)39.336 639 Q(tot=0;)81.336
651 Q(do {)90.936 663 Q 56.4(seq=read_seqbegin\(&seqlock\); //read)
148.536 675 R(first seq#)6 E(for\(i=0;i<n_acct;i++\))148.536 687 Q({)
148.536 699 Q(rw_rdlock\(&accounts[i].rwlock\);)206.136 711 Q
(tot+=accounts[i].balance;)206.136 723 Q
(rw_unlock\(&accounts[i].rwlock\);)206.136 735 Q 0 Cg EP
%%Page: 16 16
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 16)71.748 E(\2512013 Jef)142.155 E 2.25(fH)-.225 G(akner)
-2.25 E/F1 10/Courier@0 SF(})148.536 117 Q 6(}w)90.936 141 S
(hile \(read_seqretry\(&seqlock,seq\)\);)-6 E(//compare to current seq#)
60 E(return tot;)81.336 153 Q(})33.336 165 Q/F2 13/Times-Bold@0 SF
(Semaphor)233.51 195 Q(es)-.234 E/F3 13/Times-Roman@0 SF 4.33
(Semaphores are a classic inter)33.336 231 R 4.331
(-task synchronization mechanism \214rst introduced by)-.26 F 3.208
(Dijkstra in 1965.)33.336 246 R(The)9.708 E 6.458(ya)-.195 G 3.207
(re most useful in coordinating producer/consumer tasks or)-6.458 F
(where)33.336 261 Q -.195(ve)-.325 G 3.25(ra).195 G(ccess to a \214x)
-3.25 E(ed number of resources must be controlled.)-.195 E 4.166(As)
33.336 282 S .916(emaphore is a non-ne)-4.166 F -.065(ga)-.195 G(ti).065
E 1.306 -.195(ve i)-.325 H(nte).195 E(ger)-.195 E 7.416(.T)-.715 G .916
(he inte)-7.416 F .917(ger represents a count of the number of)-.195 F
.678("resources" a)33.336 297 R -.325(va)-.26 G .678
(ilable and is initialized with that number).325 F 7.178(.W)-.715 G .678
(hen the initial v)-7.178 F .677(alue is 1, the)-.325 F
(semaphore acts as a mute)33.336 312 Q 3.25(xl)-.195 G(ock.)-3.25 E 2.08
-1.04(We w)33.336 333 T(ill de\214ne three)1.04 E F2(atomic)3.25 E F3
(operations:)3.25 E 1.11("P", which stands for "proberen te v)69.336 354
R 1.111(erlagen", Dutch for "try to decrease".)-.195 F 1.111(The P)7.611
F .648(operation checks to see if the semaphore is positi)69.336 369 R
-.195(ve)-.325 G 7.148(.I).195 G 3.898(fi)-7.148 G 3.898(ti)-3.898 G
3.898(sn)-3.898 G .648(ot, the caller blocks.)-3.898 F 2.842
(Otherwise, the semaphore is decremented by 1.)69.336 384 R 2.842
(This check and decrement is)9.342 F 3.25(atomic. The)69.336 399 R 3.25
(Po)3.25 G(peration is also sometimes called "w)-3.25 E(ait" or "do)-.13
E(wn" or "dec".)-.325 E 4.947("V", which stands for "v)69.336 420 R
4.946(erhogen", Dutch for "increase".)-.195 F 4.946(The V operation)
11.446 F 2.987(increments the semaphore by 1.)69.336 435 R 2.988
(If the semaphore v)9.487 F 2.988(alue is no)-.325 F 6.238(wp)-.325 G
(ositi)-6.238 E -.195(ve)-.325 G 6.238(,a).195 G -.195(ny)-6.238 G
(sleeping tasks are a)69.336 450 Q -.13(wa)-.195 G -.13(ke).13 G 3.25
(ned. V).13 F(is also called "inc" or "post".)3.25 E("TR)69.336 471 Q
3.084(Y", which attempts the P operation, b)-.845 F 3.084
(ut if the semaphore is not positi)-.26 F -.195(ve)-.325 G(,).195 E
(returns immediately with a f)69.336 486 Q(ailure code.)-.13 E .119
(In addition to the counter)69.336 507 R 3.37(,as)-.52 G .12
(emaphore must contain some w)-3.37 F .12(ay of recording which)-.13 F
1.354(tasks are blocking on it.)69.336 522 R 1.353
(The actual blocking and unblocking are not part of the)7.854 F
(semaphore per se, b)69.336 537 Q(ut must be pro)-.26 E
(vided by the operating system.)-.195 E F2(Condition V)211.774 567 Q
(ariables)-1.196 E F3 .552(Condition v)33.336 603 R .552
(ariables are used to suspend tasks which need to w)-.325 F .553
(ait for a speci\214c condition)-.13 F .667(\(aka e)33.336 618 R -.195
(ve)-.325 G .667(nt\) to occur before proceeding.).195 F .667
(When another task generates the e)7.167 F -.195(ve)-.325 G .667
(nt, it w).195 F(ak)-.13 E(es)-.13 E 2.757(up an)33.336 633 R 6.007(yt)
-.195 G 2.757(asks which are sleeping on the condition v)-6.007 F 6.007
(ariable. An)-.325 F 2.758(underlying operating)6.007 F(system must pro)
33.336 648 Q(vide sleep and w)-.195 E(ak)-.13 E(eup primiti)-.13 E -.195
(ve)-.325 G(s.).195 E 2.719(The condition v)33.336 669 R 2.719
(ariable f)-.325 F 2.719(acilities used in the e)-.13 F 2.719
(xample belo)-.195 F 5.969(wa)-.325 G 2.719(re found in the POSIX)-5.969
F .673(threads library and are a)33.336 684 R -.325(va)-.26 G .674
(ilable under Linux, Solaris and man).325 F 3.924(yo)-.195 G .674
(ther operating systems.)-3.924 F 1.864(The Solaris k)33.336 699 R 1.864
(ernel relies hea)-.13 F 1.864(vily on condition v)-.26 F 1.864
(ariables. The Linux k)-.325 F 1.864(ernel uses a v)-.13 F(ery)-.195 E
1.513(similar f)33.336 714 R 1.513(acility called "w)-.13 F 1.513
(ait queues", which will be discussed in a subsequent unit, and)-.13 F
(semaphores, which are discussed later in this unit.)33.336 729 Q 0 Cg
EP
%%Page: 17 17
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 17)71.748 E(\2512013 Jef)142.155 E 2.25(fH)-.225 G(akner)
-2.25 E/F1 13/Times-Bold@0 SF(Condition V)181.62 120 Q
(ariable Operations)-1.196 E/F2 13/Times-Roman@0 SF 5.199(Ac)33.336 150
S 1.949(ondition v)-5.199 F 1.949(ariable is al)-.325 F -.13(wa)-.13 G
1.949(ys used in conjunction with a mute).13 F 5.199(xl)-.195 G 5.199
(ock. The)-5.199 F(follo)5.199 E(wing)-.325 E(condition v)33.336 165 Q
(ariable operations are pro)-.325 E(vided:)-.195 E<83>33.336 195 Q/F3 13
/Courier@0 SF(pthread_cond_wait)7.985 E F2 7.986(:B)C 4.736
(lock the calling task on the condition v)-7.986 F 4.736
(ariable \(\214rst)-.325 F(ar)33.336 210 Q .972
(gument\), which represents a speci\214c condition or e)-.234 F -.195
(ve)-.325 G .971(nt the task wishes to w).195 F .971(ait for)-.13 F
7.471(.A)-.715 G(mute)33.336 225 Q 10.149(xi)-.195 G 10.149(ss)-10.149 G
6.9(upplied as the second ar)-10.149 F 10.15(gument. The)-.234 F 6.9
(identity of the task calling)10.15 F F3(pthread_cond_wait)33.336 240 Q
F2 1.546(is stored in the condition v)4.796 F 1.545
(ariable data structure, the supplied)-.325 F(mute)33.336 255 Q 3.419
(xi)-.195 G 3.419(sr)-3.419 G .169
(eleased and the calling task is put to sleep atomically)-3.419 F 6.669
(.T)-.845 G .169(he task sleeps until it is)-6.669 F -2.99 -.195(aw a)
33.336 270 T -.13(ke).195 G 12.545(ned by some other task calling).13 F
F3(pthread_cond_broadcast)15.795 E F2(or)15.795 E F3
(pthread_cond_signal)33.336 285 Q F2 25.889(.B)C 19.39
(efore returning control to the caller)-25.889 F(,)-.52 E F3
(pthread_cond_wait)33.336 300 Q F2 3.765(re-acquires the mute)7.016 F
7.015(x. Schematically)-.195 F 7.015(,w)-.845 G 7.015(ec)-7.015 G 3.765
(an e)-7.015 F 3.765(xpress this)-.195 F(primiti)33.336 315 Q .39 -.195
(ve a)-.325 H(s:).195 E/F4 10/Courier@0 SF
(pthread_cond_wait\(pthread_cond_t *cp,pthread_mutex_t *mut\))33.336 327
Q({)33.336 339 Q(ATOMICALLY {)90.936 351 Q
(note within *cp that we are interested)148.536 363 Q
(pthread_mutex_unlock\(mut\))148.536 375 Q(go to sleep)148.536 387 Q(})
90.936 399 Q(/* We have been awakened */)90.936 411 Q
(pthread_mutex_lock\(mut\);)90.936 423 Q(})33.336 435 Q F2<83>33.336 450
Q F3(pthread_cond_signal)8.284 E F2 8.285(:R)C 5.035
(elease at most one task block)-8.285 F 5.035(ed on the supplied)-.13 F
1.995(condition v)33.336 465 R 5.245(ariable. If)-.325 F 1.995
(more than one task is block)5.245 F 1.994(ed on the condition v)-.13 F
1.994(ariable, one is)-.325 F(pick)33.336 480 Q 5.123(ed at random.)-.13
F 5.124(If no tasks are block)11.623 F 5.124(ed, this call has no ef)
-.13 F 5.124(fect, and is not)-.325 F 5.699("remembered". Should)33.336
495 R 2.448(be called under the protection of the mute)5.699 F 5.698(xf)
-.195 G 2.448(or the condition)-5.698 F -.325(va)33.336 510 S
(riable, as discussed belo).325 E -.845(w.)-.325 G<83>33.336 525 Q F3
(pthread_cond_broadcast)5.08 E F2 5.08(:R)C 1.83(elease all tasks block)
-5.08 F 1.83(ed on the supplied condition)-.13 F -.325(va)33.336 540 S
4.408(riable. If).325 F 1.158(there are no block)4.408 F 1.158
(ed tasks, this call has no ef)-.13 F 1.158
(fect and is not "remembered".)-.325 F 4.045
(Should be called under the protection of the mute)33.336 555 R 7.295
(xf)-.195 G 4.045(or the condition v)-7.295 F 4.045(ariable, as)-.325 F
(discussed belo)33.336 570 Q -.845(w.)-.325 G 0 Cg EP
%%Page: 18 18
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 18)71.748 E(\2512013 Jef)142.155 E 2.25(fH)-.225 G(akner)
-2.25 E/F1 13/Times-Bold@0 SF(Pr)114.878 120 Q(oducer/Consumer pr)-.234
E(oblem using condition v)-.234 E(ariables)-.13 E/F2 10/Courier@0 SF
(volatile struct fifo {)33.336 147 Q(char buf[BSIZE];)90.936 159 Q
(int next_write,next_read;)90.936 171 Q(int item_count;)90.936 183 Q
(pthread_cond_t full,empty;)90.936 195 Q(/* Condition variables */)16.8
E(pthread_mutex_t mutex;)90.936 207 Q(/* Common mutex for fifo */)98.4 E
6(}f)33.336 219 S(ifo;)-6 E(initialize\(struct fifo *fifo\))33.336 243 Q
({)33.336 255 Q(fifo->mutex=PTHREAD_MUTEX_INITIALIZER;)90.936 267 Q
(fifo->full=PTHREAD_COND_INITIALIZER;)90.936 279 Q
(fifo->empty=PTHREAD_COND_INITIALIZER;)90.936 291 Q(fifo->next_write=0;)
90.936 303 Q(fifo->next_read=0;)90.936 315 Q(fifo->item_count=0;)90.936
327 Q(})33.336 339 Q(producer\(struct fifo *fifo,char c\))33.336 363 Q
({)33.336 375 Q(pthread_mutex_lock\(&fifo->mutex\);)90.936 387 Q
(while \(fifo->item_count>=BSIZE\))90.936 399 Q(/* Full */)102 E
(pthread_cond_wait\(&fifo->full,&fifo->mutex\);)148.536 411 Q
(fifo->buf[fifo->next_write++]=c;)90.936 423 Q(fifo->next_write%=BSIZE;)
90.936 435 Q(fifo->item_count++;)90.936 447 Q
(pthread_cond_signal\(&fifo->empty\);)90.936 459 Q
(pthread_mutex_unlock\(&fifo->mutex\);)90.936 471 Q(})33.336 483 Q
(consumer\(struct fifo *fifo\))33.336 519 Q({)33.336 531 Q(char c;)
39.336 543 Q(pthread_mutex_lock\(&fifo->mutex\);)90.936 555 Q
(while \(fifo->item_count<=0\))90.936 567 Q(/* Empty */)68.4 E
(pthread_cond_wait\(&fifo->empty,&fifo->mutex\);)148.536 579 Q
(c=fifo->buf[fifo->next_read++];)90.936 591 Q(fifo->next_read%=BSIZE;)
90.936 603 Q(fifo->item_count--;)90.936 615 Q
(pthread_cond_signal\(&fifo->full\);)90.936 627 Q
(pthread_mutex_unlock\(&fifo->mutex\);)90.936 639 Q(return c;)90.936 651
Q(})33.336 663 Q 0 Cg EP
%%Page: 19 19
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 19)71.748 E(\2512013 Jef)142.155 E 2.25(fH)-.225 G(akner)
-2.25 E/F1 13/Times-Roman@0 SF .948(When the condition v)33.336 120 R
.948(ariable is a simple counting e)-.325 F .948
(xpression, such as the FIFO e)-.195 F(xample)-.195 E(abo)33.336 135 Q
-.195(ve)-.195 G 4.8(,t).195 G 1.551(hen condition v)-4.8 F 1.551
(ariables and semaphores are virtually equi)-.325 F -.325(va)-.325 G
4.801(lent. But).325 F(condition)4.801 E -.325(va)33.336 150 S .788
(riables can also control more complicated boolean e).325 F .787
(xpressions which do not obe)-.195 F 4.037(yt)-.195 G(his)-4.037 E
(count-up/count-do)33.336 165 Q 4.543(wn paradigm.)-.325 F 4.543
(As an e)11.043 F 4.544(xample, consider an embedded thermostat)-.195 F
4.144(application. One)33.336 180 R .894(thread controls the operation \
of a heating or cooling system, while the)4.144 F .379
(other thread monitors a temperature sensor)33.336 195 R 3.629(,a)-.52 G
.379(nd a third thread monitors the setpoint.)-3.629 F(Our)6.879 E
(condition v)33.336 210 Q
(ariable will be that some input \(sensor or setpoint\) has changed.)
-.325 E/F2 10/Courier@0 SF(volatile struct therm {)33.336 234 Q
(int sensor_reading;)90.936 246 Q(int setpoint;)90.936 258 Q
(pthread_cond_t change;)90.936 270 Q 6(}t)33.336 282 S(herm;)-6 E
(initialize\(struct therm *t\))33.336 306 Q({)33.336 318 Q
(t->mutex=PTHREAD_MUTEX_INITIALIZER;)90.936 342 Q
(t->change=PTHREAD_COND_INITIALIZER;)90.936 354 Q(})33.336 366 Q
(sensor_change_handler\(struct therm *t\))33.336 390 Q({)33.336 402 Q
(int newval;)39.336 414 Q(//newval=read new sensor value from I/O port)
90.936 426 Q(pthread_mutex_lock\(&t->mutex\);)90.936 438 Q
(t->sensor=newval;)90.936 450 Q(pthread_cond_signal\(&t->change\);)
90.936 462 Q(pthread_mutex_unlock\(&t->mutex\);)90.936 474 Q(})33.336
486 Q(setpoint_change_handler\(struct therm *t\))33.336 510 Q({)33.336
522 Q(int newval;)39.336 534 Q
(//newval=read new setpoint from user via I/O port)90.936 546 Q
(pthread_mutex_lock\(&t->mutex\);)90.936 558 Q(t->setpoint=newval;)
90.936 570 Q(pthread_cond_signal\(&t->change\);)90.936 582 Q
(pthread_mutex_unlock\(&t->mutex\);)90.936 594 Q(})33.336 606 Q
(thermostat\(struct therm *t\))33.336 630 Q({)33.336 642 Q(for\(;;\))
90.936 654 Q({)90.936 666 Q(pthread_mutex_lock\(&t->mutex\);)148.536 678
Q(pthread_cond_wait\(&t->change,&t->mutex\);)148.536 690 Q
(//We own the mutex here)148.536 702 Q
(if \(t->sensor>t->setpoint+DEADBAND\))148.536 714 Q
(//call for cooling via I/O port)206.136 726 Q
(else if \(t->sensor<t->setpoint-DEADBAND\))148.536 738 Q 0 Cg EP
%%Page: 20 20
%%BeginPageSetup
BP
%%EndPageSetup
/F0 9/Times-Roman@0 SF(ECE357:Computer Operating Systems)33.336 60 Q
(Unit 7/pg 20)71.748 E(\2512013 Jef)142.155 E 2.25(fH)-.225 G(akner)
-2.25 E/F1 10/Courier@0 SF(//call for heating via I/O port)206.136 117 Q
(else)148.536 129 Q(//turn off both heating and cooling)206.136 141 Q
(pthread_mutex_unlock\(&t->mutex\);)148.536 153 Q(})90.936 165 Q(})
33.336 177 Q/F2 13/Times-Bold@0 SF(Some Golden Rules of Condition V)
148.938 198 Q(ariables)-1.196 E/F3 13/Times-Roman@0 SF<83>33.336 228 Q
F2 4.686(The condition v)7.936 F 4.686(ariable is not the condition.)
-.13 F F3 4.685(The condition is some boolean)11.185 F -.195(ex)33.336
243 S(pression which is tested separately).195 E(.)-.845 E<83>33.336 258
Q F2 2.849(The condition must be r)6.099 F(e-tested.)-.234 E F3 2.85
(Return from)9.35 F/F4 13/Courier@0 SF(pthread_cond_wait)6.1 E F3 2.85
(does not)6.1 F 2.097(guarantee that the condition is no)33.336 273 R
5.347(wt)-.325 G 2.096(rue, because it is)-5.347 F F2 2.096(not atomic)
5.346 F F3 2.096(with respect to the)5.346 F 1.634
(condition: between the time that the task w)33.336 288 R(ak)-.13 E
1.635(es up and the time that it re-acquires the)-.13 F(mute)33.336 303
Q 6.879(xw)-.195 G(ithin)-6.879 E F4(pthread_cond_wait)6.879 E F3 6.879
(,a)C 3.628(nother task might come along, acquire the)-6.879 F(mute)
33.336 318 Q 1.315
(x, and perform an operation which causes the condition to become f)
-.195 F 1.315(alse ag)-.13 F 4.565(ain. In)-.065 F .974
(the producer/consumer e)33.336 333 R .973
(xample, we see that the empty or full condition is tested with a)-.195
F 1.609(while loop.)33.336 348 R 1.609(In the thermostat e)8.109 F 1.61
(xample, each possible condition \(heating/cooling/of)-.195 F 1.61
(f\) is)-.325 F -.195(ex)33.336 363 S(plicitly tested, with the mute)
.195 E 3.25(xh)-.195 G(eld.)-3.25 E<83>33.336 378 Q F2 .25
(The mutex must be held while the condition is being tested)3.5 F F3
6.749(.T)C .249(he condition test itself)-6.749 F 1.548
(is not necessarily atomic \(e.g. the boolean e)33.336 393 R 1.549
(xpression is made up of && or || clauses\).)-.195 F 6.856
(Furthermore, testing the condition and calling)33.336 408 R F4
(pthread_cond_wait)10.106 E F3 6.855(are not)10.106 F .562
(inhererently atomic.)33.336 423 R(The)7.062 E 3.812(ym)-.195 G .562
(ust be made atomic through the use of the mute)-3.812 F 3.812
(x. Consider)-.195 F 2.092(the FIFO e)33.336 438 R 2.092(xample abo)
-.195 F 2.482 -.195(ve w)-.195 H 2.092(ithout a mute).195 F 5.342
(x. Between)-.195 F 2.092(the time that, e.g., the consumer)5.342 F
4.379(\214nds the \214fo empty in the while\(\) test and the time it pu\
ts itself to sleep with)33.336 453 R(pthread_cond_w)33.336 468 Q .812(a\
it a producer could come along, write a character \(rendering the empty)
-.13 F 3.56(condition f)33.336 483 R 3.56
(alse\) and call pthread_cond_signal.)-.13 F 3.561
(Since the consumer has not reached)10.061 F(cond_w)33.336 498 Q 1.128
(ait yet, the signal is lost and the consumer may sleep fore)-.13 F
-.195(ve)-.325 G 5.807 -.715(r. T).195 H 1.127(his is kno).715 F 1.127
(wn as)-.325 F(the)33.336 513 Q F2 2.132(lost wak)5.382 F 2.132(eup pr)
-.13 F(oblem)-.234 E F3 8.632(.B)C 5.382(yp)-8.632 G 2.132
(rotecting access with a mute)-5.382 F 2.132(x, the test and the sleep)
-.195 F(ef)33.336 528 Q(fecti)-.325 E -.195(ve)-.325 G
(ly become atomic, pre).195 E -.195(ve)-.325 G(nting a lost w).195 E(ak)
-.13 E(eup.)-.13 E<83>33.336 543 Q F2(Use)4.49 E F4(pthread_cond_signal)
4.49 E F3 4.49(,o)9.04 G 1.239(nly when at most one a)-4.49 F -.13(wa)
-.195 G -.13(ke).13 G 1.239(ned thread w).13 F 1.239(ould be)-.13 F .338
(able to proceed.)33.336 558 R .338(Otherwise use)6.838 F F4
(pthread_cond_broadcast)3.588 E F3 .338(to mak)3.588 F 3.588(es)-.13 G
.338(ure all threads)-3.588 F(which could possibly proceed are w)33.336
573 Q(ok)-.13 E(en up.)-.13 E<83>33.336 594 Q F2 1.228
(Hold the mutex when)4.478 F F4(pthread_cond_signal)4.478 E F2(or)4.478
E F4(cond_broadcast)4.478 E F2 1.227(is called)4.477 F F3(.)A .884
(If not, another thread may be testing the condition just as the w)
33.336 609 R(ak)-.13 E .884(eup arri)-.13 F -.195(ve)-.325 G 4.134(sa)
.195 G .884(nd w)-4.134 F(ould)-.13 E(therefore miss the w)33.336 624 Q
(ak)-.13 E(eup and potentially w)-.13 E(ait fore)-.13 E -.195(ve)-.325 G
-.715(r.).195 G 0 Cg EP
%%Trailer
end
%%EOF
